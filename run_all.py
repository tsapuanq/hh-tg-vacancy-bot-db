# #run_all.py
# import asyncio
# import logging
# from src.run_scraper import run_scraper
# from src.cleaning import run_cleaning_pipeline
# from src.publisher import run_publisher
# from src.utils import setup_logger, determine_mode
# from database import Database
# import os

# if __name__ == "__main__":
#     setup_logger()

#     db = Database(os.getenv("DATABASE_URL"))
#     mode = determine_mode()
#     logging.info(f"[MODE] –í—ã–±—Ä–∞–Ω —Ä–µ–∂–∏–º: {mode.upper()}")

#     logging.info("[STEP 1] Scraping raw data...")
#     asyncio.run(run_scraper(db, mode=mode))

#     logging.info("[STEP 2] Cleaning data...")
#     run_cleaning_pipeline(db)

#     logging.info("[STEP 3] Publishing to Telegram...")
#     run_publisher(db)

#     logging.info("‚úÖ Pipeline completed successfully!")


# run_all.py
import asyncio
import logging
# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –∑–∞–ø—É—Å–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö —ç—Ç–∞–ø–æ–≤
from src.run_scraper import run_scraper
# run_cleaning_pipeline —É–¥–∞–ª–µ–Ω –∏–∑ cleaning.py, –ø–æ—ç—Ç–æ–º—É –∏–º–ø–æ—Ä—Ç —É–±—Ä–∞–Ω
from src.publisher import run_publisher
# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —É—Ç–∏–ª–∏—Ç—ã
from src.utils import setup_logger, determine_mode
# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∞—Å—Å Database
from database import Database
import os

if __name__ == "__main__":
    setup_logger() # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–≥–µ—Ä –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ

    db = None # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º None –Ω–∞ —Å–ª—É—á–∞–π –æ—à–∏–±–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    try:
        logging.info("üöÄ –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø–∞–π–ø–ª–∞–π–Ω–∞...")
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—É–ª–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        db = Database(os.getenv("DATABASE_URL"))

        mode = determine_mode() # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã (–ø–æ–∫–∞ –≤—Å–µ–≥–¥–∞ 'daily')
        logging.info(f"[MODE] –í—ã–±—Ä–∞–Ω —Ä–µ–∂–∏–º: {mode.upper()}")

        logging.info("[STEP 1/2] Scraping raw data...")
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–µ–π–ø–µ—Ä. –û–Ω —Ç–µ–ø–µ—Ä—å —Ç–∞–∫–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –ø–µ—Ä–≤–∏—á–Ω—É—é –æ—á–∏—Å—Ç–∫—É –∏ –≤—Å—Ç–∞–≤–∫—É –≤ –ë–î.
        asyncio.run(run_scraper(db, mode=mode))

        # –®–∞–≥ 2 (–æ—á–∏—Å—Ç–∫–∞) —É–¥–∞–ª–µ–Ω –∏–∑ –æ–±—â–µ–≥–æ –ø–∞–π–ø–ª–∞–π–Ω–∞.
        # LLM-–æ–±—Ä–∞–±–æ—Ç–∫–∞ (—Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∏ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è) –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–∞ –≤ publisher.

        logging.info("[STEP 2/2] Publishing to Telegram...")
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—É–±–ª–∏–∫–∞—Ç–æ—Ä. –û–Ω –≤—ã–ø–æ–ª–Ω—è–µ—Ç LLM-–æ–±—Ä–∞–±–æ—Ç–∫—É –∏ –æ—Ç–ø—Ä–∞–≤–∫—É –≤ Telegram.
        run_publisher(db)

        logging.info("‚úÖ Pipeline completed successfully!")

    except Exception as e:
        logging.critical(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–∞–π–ø–ª–∞–π–Ω–∞: {e}", exc_info=True) # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –∏ traceback
        # –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ—à–∏–±–∫–∏, –≤–æ–∑–º–æ–∂–Ω–æ, –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.

    finally:
        # –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –ø—É–ª–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –ë–î –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
        if db:
            db.close_all()
            logging.info("üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏—è –ë–î –∑–∞–∫—Ä—ã—Ç—ã.")