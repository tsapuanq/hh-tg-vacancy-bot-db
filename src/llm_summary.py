# llm_summary.py
import os
import time
import json
import re
import requests
import logging
from src.config import GEMINI_API_KEY, GEMINI_API_URL, HEADERS, LLM_API_RETRIES, LLM_API_DELAY, LLM_API_TIMEOUT

def gemini_api_call(prompt: str) -> str:
    """
    –í—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ Gemini API —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏.
    """
    if not GEMINI_API_KEY:
        logging.warning("[Gemini] ‚ùå –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è GEM_API_TOKEN")
        return ""

    for attempt in range(1, LLM_API_RETRIES + 1):
        try:
            response = requests.post(
                f"{GEMINI_API_URL}?key={GEMINI_API_KEY}",
                headers=HEADERS,
                json={"contents": [{"parts": [{"text": prompt}]}]},
                timeout=LLM_API_TIMEOUT,
            )
            response.raise_for_status() # –ü—Ä–æ–≤–µ—Ä—è–µ–º HTTP –æ—à–∏–±–∫–∏ (4xx, 5xx)
            response_json = response.json()
            if response_json and response_json.get("candidates") and response_json["candidates"][0].get("content") and response_json["candidates"][0]["content"].get("parts"):
                 return response_json["candidates"][0]["content"]["parts"][0]["text"]
            else:
                 logging.warning(f"[Gemini] –û—Ç–≤–µ—Ç API –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–∂–∏–¥–∞–µ–º–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã: {response.text}")
                 return "" # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É, –µ—Å–ª–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –Ω–µ–≤–µ—Ä–Ω–∞

        except requests.exceptions.HTTPError as e:
            if response.status_code == 429:
                logging.warning(f"[Gemini] 429 Too Many Requests ‚Äî –ø–æ–ø—ã—Ç–∫–∞ {attempt}/{LLM_API_RETRIES}")
                time.sleep(LLM_API_DELAY * attempt) # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –ø—Ä–∏ 429
                continue 
            else:
                logging.warning(f"[Gemini] HTTP –æ—à–∏–±–∫–∞: {e.response.status_code} - {e.response.text}")
                break 
        except requests.exceptions.RequestException as e:
             logging.warning(f"[Gemini] –°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞: {e} ‚Äî –ø–æ–ø—ã—Ç–∫–∞ {attempt}/{LLM_API_RETRIES}")
             if attempt < LLM_API_RETRIES:
                 time.sleep(LLM_API_DELAY * attempt)
                 continue 
             else:
                 break 
        except Exception as e:
            logging.warning(f"[Gemini] –û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ: {e}")
            break # –ù–µ –ø–æ–≤—Ç–æ—Ä—è—Ç—å –ø—Ä–∏ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–π –æ—à–∏–±–∫–µ

    return "" # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –ø–æ—Å–ª–µ –≤—Å–µ—Ö –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫

SUMMARY_PROMPT_TEMPLATE = """
–†–∞–∑–±–µ–π —Ç–µ–∫—Å—Ç –æ–ø–∏—Å–∞–Ω–∏—è –≤–∞–∫–∞–Ω—Å–∏–∏ –Ω–∞ —Ç—Ä–∏ –∫—Ä–∞—Ç–∫–∏—Ö –±–ª–æ–∫–∞:

1. üìå *–û –∫–æ–º–ø–∞–Ω–∏–∏* ‚Äî –Ω–∞–ø–∏—à–∏ –æ –∫–æ–º–ø–∞–Ω–∏–∏ —Å–∞–º–æ–π –≤ 1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è—Ö.
2. üßæ *–û–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏* ‚Äî —Ç–æ–ª—å–∫–æ –∫–ª—é—á–µ–≤—ã–µ –ø—É–Ω–∫—Ç—ã, –∫—Ä–∞—Ç–∫–æ, –ø–æ –¥–µ–ª—É (–¥–æ 3‚Äì5 –ø—É–Ω–∫—Ç–æ–≤).
3. üéØ *–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è* ‚Äî —Å–∞–º—ã–µ –≤–∞–∂–Ω—ã–µ –Ω–∞–≤—ã–∫–∏ –∏ —É—Å–ª–æ–≤–∏—è, –∫—Ä–∞—Ç–∫–æ (–¥–æ 3‚Äì5 –ø—É–Ω–∫—Ç–æ–≤).

üì¢ –ù–µ –ø–∏—à–∏ –≤–≤–æ–¥–Ω—ã—Ö —Ñ—Ä–∞–∑, –Ω–µ –¥–æ–±–∞–≤–ª—è–π –ª–∏—à–Ω–∏–µ —Å–ª–æ–≤–∞. –ò—Å–ø–æ–ª—å–∑—É–π –º–∞—Ä–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ (‚Ä¢), –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ.
üö´ –ï—Å–ª–∏ –¥–ª—è –∫–∞–∫–æ–≥–æ-–ª–∏–±–æ –±–ª–æ–∫–∞ –Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ ‚Äî —É–∫–∞–∂–∏ "–ù–µ —É–∫–∞–∑–∞–Ω–æ".
üîç –ù–µ –ø—Ä–∏–¥—É–º—ã–≤–∞–π –Ω–∏—á–µ–≥–æ –Ω–æ–≤–æ–≥–æ ‚Äî —Ä–∞–±–æ—Ç–∞–π —Ç–æ–ª—å–∫–æ —Å —Ç–µ–º, —á—Ç–æ –µ—Å—Ç—å –≤ –æ–ø–∏—Å–∞–Ω–∏–∏.

–í–µ—Ä–Ω–∏ **–ß–ò–°–¢–´–ô JSON** —Å –∫–ª—é—á–∞–º–∏: `about_company`, `responsibilities`, `requirements`.

–û–ø–∏—Å–∞–Ω–∏–µ:
{description}
"""

def clean_gemini_response(raw: str) -> dict:
    """
    –ß–∏—Å—Ç–∏—Ç —Å—ã—Ä–æ–π –æ—Ç–≤–µ—Ç LLM (—É–¥–∞–ª—è–µ—Ç ```json) –∏ –ø–∞—Ä—Å–∏—Ç JSON.
    """
    try:
        # –ë–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –º–∞—Ä–∫–µ—Ä–æ–≤ JSON
        cleaned = re.sub(r"^\s*```json\s*\n|\n\s*```\s*$", "", raw, flags=re.IGNORECASE|re.DOTALL).strip()
        parsed = json.loads(cleaned)
        return {
            "about_company": str(parsed.get("about_company", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")).strip(),
            "responsibilities": parsed.get("responsibilities", "–ù–µ —É–∫–∞–∑–∞–Ω–æ"), # –ú–æ–∂–µ—Ç –±—ã—Ç—å —Å–ø–∏—Å–∫–æ–º –∏–ª–∏ —Å—Ç—Ä–æ–∫–æ–π
            "requirements": parsed.get("requirements", "–ù–µ —É–∫–∞–∑–∞–Ω–æ"), # –ú–æ–∂–µ—Ç –±—ã—Ç—å —Å–ø–∏—Å–∫–æ–º –∏–ª–∏ —Å—Ç—Ä–æ–∫–æ–π
        }
    except json.JSONDecodeError as e:
        logging.warning(f"[Gemini‚Äësummary] ‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –æ—Ç–≤–µ—Ç–∞ LLM: {e}")
        logging.warning("[Gemini‚Äësummary] –°—ã—Ä–æ–π –æ—Ç–≤–µ—Ç, –≤—ã–∑–≤–∞–≤—à–∏–π –æ—à–∏–±–∫—É:\n" + raw)
        return {
            "about_company": "–ù–µ —É–∫–∞–∑–∞–Ω–æ",
            "responsibilities": "–ù–µ —É–∫–∞–∑–∞–Ω–æ",
            "requirements": "–ù–µ —É–∫–∞–∑–∞–Ω–æ",
        }
    except Exception as e:
        logging.warning(f"[Gemini‚Äësummary] ‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —á–∏—Å—Ç–∫–µ/–ø–∞—Ä—Å–∏–Ω–≥–µ LLM –æ—Ç–≤–µ—Ç–∞: {e}")
        logging.warning("[Gemini‚Äësummary] –°—ã—Ä–æ–π –æ—Ç–≤–µ—Ç, –≤—ã–∑–≤–∞–≤—à–∏–π –æ—à–∏–±–∫—É:\n" + raw)
        return {
            "about_company": "–ù–µ —É–∫–∞–∑–∞–Ω–æ",
            "responsibilities": "–ù–µ —É–∫–∞–∑–∞–Ω–æ",
            "requirements": "–ù–µ —É–∫–∞–∑–∞–Ω–æ",
        }

def summarize_description_llm(description: str) -> dict:
    """
    –ü–æ–ª—É—á–∞–µ—Ç summary –æ–ø–∏—Å–∞–Ω–∏—è –≤–∞–∫–∞–Ω—Å–∏–∏ —Å –ø–æ–º–æ—â—å—é LLM.
    """
    if not description or description.strip() == "–ù–µ —É–∫–∞–∑–∞–Ω–æ":
        return {
            "about_company": "–ù–µ —É–∫–∞–∑–∞–Ω–æ",
            "responsibilities": "–ù–µ —É–∫–∞–∑–∞–Ω–æ",
            "requirements": "–ù–µ —É–∫–∞–∑–∞–Ω–æ",
        }

    prompt = SUMMARY_PROMPT_TEMPLATE.format(description=description)
    raw = gemini_api_call(prompt) # –£–±—Ä–∞–ª .strip(), —Ç.–∫. clean_gemini_response –¥–µ–ª–∞–µ—Ç strip
    logging.info("[Gemini‚Äësummary] –°—ã—Ä—ã–π –æ—Ç–≤–µ—Ç:\n" + raw)
    return clean_gemini_response(raw)

FILTER_PROMPT = """
–¢—ã –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å –≤–∞–∫–∞–Ω—Å–∏–∏ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏ –æ–ø–∏—Å–∞–Ω–∏—é.

–ü—Ä–æ—Ñ–µ—Å—Å–∏—è —Å—á–∏—Ç–∞–µ—Ç—Å—è —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ–π, –µ—Å–ª–∏ –æ–Ω–∞ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ –æ–¥–Ω–æ–π –∏–∑ —Å–ª–µ–¥—É—é—â–∏—Ö:

- Data Scientist
- Senior Data Scientist
- Junior Data Scientist
- Machine Learning Engineer
- ML Engineer
- Data Analyst
- Senior Data Analyst
- Data Engineer
- Big Data Engineer
- Data Architect
- Business Intelligence Analyst
- BI Analyst
- Business Intelligence Developer
- Statistician
- Quantitative Analyst
- NLP Engineer
- Computer Vision Engineer
- Deep Learning Engineer
- Artificial Intelligence Engineer
- AI Researcher
- Data Researcher
- Predictive Analytics Specialist
- Data Science Manager
- Analytics Consultant
- Data Miner
- Data Specialist
- Data Modeler
- DevOps Engineer
- MLOps Engineer
- System Analyst
- Analytics Engineer
- Data Platform Engineer
- Data Visualization Engineer
- Data Modeler
‚ùóÔ∏è–ò–≥–Ω–æ—Ä–∏—Ä—É–π –≤–∞–∫–∞–Ω—Å–∏–∏ –∏–∑ –¥—Ä—É–≥–∏—Ö —Å—Ñ–µ—Ä, –¥–∞–∂–µ –µ—Å–ª–∏ –≤ —Ç–µ–∫—Å—Ç–µ –≤—Å—Ç—Ä–µ—á–∞—é—Ç—Å—è —Å–ª–æ–≤–∞ —Ç–∏–ø–∞ ‚Äúdata‚Äù, ‚ÄúAI‚Äù, ‚Äúmodel‚Äù –∏ —Ç.–ø., –Ω–æ –æ–Ω–∏ –Ω–µ –æ—Ç–Ω–æ—Å—è—Ç—Å—è –∫ –ø—Ä–æ—Ñ–µ—Å—Å–∏—è–º –∏–∑ —Å–ø–∏—Å–∫–∞.

–ü—Ä–æ—Ñ–µ—Å—Å–∏—è: "{title}"
–û–ø–∏—Å–∞–Ω–∏–µ: "{description}"

–û—Ç–≤–µ—Ç—å —Å—Ç—Ä–æ–≥–æ –æ–¥–Ω–∏–º —Å–ª–æ–≤–æ–º: yes –∏–ª–∏ no.
"""

def filter_vacancy_llm(title: str, description: str) -> bool:
    """
    –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å –≤–∞–∫–∞–Ω—Å–∏–∏ —Å –ø–æ–º–æ—â—å—é LLM.
    """
    if not title or not description:
         return False # –ù–µ –º–æ–∂–µ–º –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å –±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è –∏–ª–∏ –æ–ø–∏—Å–∞–Ω–∏—è

    prompt = FILTER_PROMPT.format(title=title, description=description)
    raw = gemini_api_call(prompt).strip()
    logging.info("[Gemini‚Äëfilter] –°—ã—Ä—ã–π –æ—Ç–≤–µ—Ç:\n" + raw)
    # –ë–æ–ª–µ–µ —Å—Ç—Ä–æ–≥–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–∞
    return raw.lower() == "yes"

