# llm_summary.py
import time
import json
import re
import requests
import logging

from src.config import (
    GEMINI_API_KEY,
    GEMINI_API_URL,
    HEADERS,
    LLM_API_RETRIES,
    LLM_API_DELAY,
    LLM_API_TIMEOUT,
)


def gemini_api_call(prompt: str) -> str:
    """
    –í—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ Gemini API —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏.
    """
    if not GEMINI_API_KEY:
        logging.warning(
            "[Gemini] ‚ùå –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è GEM_API_TOKEN"
        )
        return ""

    for attempt in range(1, LLM_API_RETRIES + 1):
        try:
            response = requests.post(
                f"{GEMINI_API_URL}?key={GEMINI_API_KEY}",
                headers=HEADERS,
                json={"contents": [{"parts": [{"text": prompt}]}]},
                timeout=LLM_API_TIMEOUT,
            )
            response.raise_for_status()  
            response_json = response.json()
            if (
                response_json
                and response_json.get("candidates")
                and response_json["candidates"][0].get("content")
                and response_json["candidates"][0]["content"].get("parts")
            ):
                return response_json["candidates"][0]["content"]["parts"][0]["text"]
            else:
                logging.warning(
                    f"[Gemini] –û—Ç–≤–µ—Ç API –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–∂–∏–¥–∞–µ–º–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã: {response.text}"
                )
                return ""

        except requests.exceptions.HTTPError as e:
            if response.status_code == 429:
                logging.warning(
                    f"[Gemini] 429 Too Many Requests ‚Äî –ø–æ–ø—ã—Ç–∫–∞ {attempt}/{LLM_API_RETRIES}"
                )
                time.sleep(LLM_API_DELAY * attempt)  
                continue  
            else:
                logging.warning(
                    f"[Gemini] HTTP –æ—à–∏–±–∫–∞: {e.response.status_code} - {e.response.text}"
                )
                break  
        except requests.exceptions.RequestException as e:
            logging.warning(
                f"[Gemini] –°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞: {e} ‚Äî –ø–æ–ø—ã—Ç–∫–∞ {attempt}/{LLM_API_RETRIES}"
            )
            if attempt < LLM_API_RETRIES:
                time.sleep(LLM_API_DELAY * attempt)
                continue  
            else:
                break  
        except Exception as e:
            logging.warning(f"[Gemini] –û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ: {e}")
            break  

    return ""


SUMMARY_PROMPT_TEMPLATE = """
–†–∞–∑–±–µ–π —Ç–µ–∫—Å—Ç –æ–ø–∏—Å–∞–Ω–∏—è –≤–∞–∫–∞–Ω—Å–∏–∏ –Ω–∞ —Ç—Ä–∏ –∫—Ä–∞—Ç–∫–∏—Ö –±–ª–æ–∫–∞:

1. üìå *–û –∫–æ–º–ø–∞–Ω–∏–∏* ‚Äî –Ω–∞–ø–∏—à–∏ –æ –∫–æ–º–ø–∞–Ω–∏–∏ —Å–∞–º–æ–π –≤ 1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è—Ö.
2. üßæ *–û–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏* ‚Äî —Ç–æ–ª—å–∫–æ –∫–ª—é—á–µ–≤—ã–µ –ø—É–Ω–∫—Ç—ã, –∫—Ä–∞—Ç–∫–æ, –ø–æ –¥–µ–ª—É (–¥–æ 3‚Äì5 –ø—É–Ω–∫—Ç–æ–≤).
3. üéØ *–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è* ‚Äî —Å–∞–º—ã–µ –≤–∞–∂–Ω—ã–µ –Ω–∞–≤—ã–∫–∏ –∏ —É—Å–ª–æ–≤–∏—è, –∫—Ä–∞—Ç–∫–æ (–¥–æ 3‚Äì5 –ø—É–Ω–∫—Ç–æ–≤).

üì¢ –ù–µ –ø–∏—à–∏ –≤–≤–æ–¥–Ω—ã—Ö —Ñ—Ä–∞–∑, –Ω–µ –¥–æ–±–∞–≤–ª—è–π –ª–∏—à–Ω–∏–µ —Å–ª–æ–≤–∞. –ò—Å–ø–æ–ª—å–∑—É–π –º–∞—Ä–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ (‚Ä¢), –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ.
üö´ –ï—Å–ª–∏ –¥–ª—è –∫–∞–∫–æ–≥–æ-–ª–∏–±–æ –±–ª–æ–∫–∞ –Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ ‚Äî —É–∫–∞–∂–∏ "–ù–µ —É–∫–∞–∑–∞–Ω–æ".
üîç –ù–µ –ø—Ä–∏–¥—É–º—ã–≤–∞–π –Ω–∏—á–µ–≥–æ –Ω–æ–≤–æ–≥–æ ‚Äî —Ä–∞–±–æ—Ç–∞–π —Ç–æ–ª—å–∫–æ —Å —Ç–µ–º, —á—Ç–æ –µ—Å—Ç—å –≤ –æ–ø–∏—Å–∞–Ω–∏–∏.

–í–µ—Ä–Ω–∏ **–ß–ò–°–¢–´–ô JSON** —Å –∫–ª—é—á–∞–º–∏: `about_company`, `responsibilities`, `requirements`.
–î–ª—è `responsibilities` –∏ `requirements` –∏—Å–ø–æ–ª—å–∑—É–π **–º–∞—Å—Å–∏–≤ —Å—Ç—Ä–æ–∫ (JSON array of strings)**.

–û–ø–∏—Å–∞–Ω–∏–µ:
{description}
"""  

def clean_gemini_response(raw: str) -> dict:
    """
    –ß–∏—Å—Ç–∏—Ç —Å—ã—Ä–æ–π –æ—Ç–≤–µ—Ç LLM (—É–¥–∞–ª—è–µ—Ç ```json) –∏ –ø–∞—Ä—Å–∏—Ç JSON.
    –ü—ã—Ç–∞–µ—Ç—Å—è –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞—Ç—å 'responsibilities' –∏ 'requirements' –≤ —Å–ø–∏—Å–∫–∏ —Å—Ç—Ä–æ–∫.
    """
    parsed = {}
    cleaned_raw = ""
    try:
        cleaned_raw = re.sub(
            r"^\s*```json\s*\n|\n\s*```\s*$", "", raw, flags=re.IGNORECASE | re.DOTALL
        ).strip()
        parsed = json.loads(cleaned_raw)

        responsibilities_raw = parsed.get(
            "responsibilities"
        )  
        requirements_raw = parsed.get("requirements")

        def normalize_to_list(item):
            """–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ –æ–¥–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ (–æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏/—Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è) –≤ —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫."""
            if isinstance(item, list):
                return [str(s).strip() for s in item if str(s).strip()]
            elif isinstance(item, str):
                s_stripped = item.strip()
                if not s_stripped or s_stripped.lower() == "–Ω–µ —É–∫–∞–∑–∞–Ω–æ":
                    return []  
                try:
                    list_from_string = json.loads(s_stripped)
                    if isinstance(list_from_string, list):
                        return [
                            str(s).strip() for s in list_from_string if str(s).strip()
                        ]
                except json.JSONDecodeError:
                    pass  

                if "\n" in s_stripped:
                    return [
                        line.strip().strip('"')
                        for line in s_stripped.split("\n")
                        if line.strip().strip('"')
                    ]
                s_cleaned_quotes = s_stripped.strip('"')
                return [s_cleaned_quotes] if s_cleaned_quotes else []

            return [str(item).strip()] if item is not None and str(item).strip() else []

        responsibilities_list = normalize_to_list(responsibilities_raw)
        requirements_list = normalize_to_list(requirements_raw)


        return {
            "about_company": str(parsed.get("about_company", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")).strip(),
            "responsibilities": (
                responsibilities_list if responsibilities_list else ["–ù–µ —É–∫–∞–∑–∞–Ω–æ"]
            ),
            "requirements": requirements_list if requirements_list else ["–ù–µ —É–∫–∞–∑–∞–Ω–æ"],
        }
    except json.JSONDecodeError as e:
        logging.warning(f"[Gemini‚Äësummary] ‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ JSON: {e}")
        logging.warning("[Gemini‚Äësummary] –°—ã—Ä–æ–π –æ—Ç–≤–µ—Ç, –≤—ã–∑–≤–∞–≤—à–∏–π –æ—à–∏–±–∫—É:\n" + raw)
        return {
            "about_company": "–ù–µ —É–∫–∞–∑–∞–Ω–æ",
            "responsibilities": ["–ù–µ —É–∫–∞–∑–∞–Ω–æ"],
            "requirements": ["–ù–µ —É–∫–∞–∑–∞–Ω–æ"],
        }
    except Exception as e:
        logging.warning(
            f"[Gemini‚Äësummary] ‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —á–∏—Å—Ç–∫–µ/–ø–∞—Ä—Å–∏–Ω–≥–µ LLM –æ—Ç–≤–µ—Ç–∞: {e}",
            exc_info=True,
        )
        logging.warning("[Gemini‚Äësummary] –°—ã—Ä–æ–π –æ—Ç–≤–µ—Ç, –≤—ã–∑–≤–∞–≤—à–∏–π –æ—à–∏–±–∫—É:\n" + raw)
        return {
            "about_company": "–ù–µ —É–∫–∞–∑–∞–Ω–æ",
            "responsibilities": ["–ù–µ —É–∫–∞–∑–∞–Ω–æ"],
            "requirements": ["–ù–µ —É–∫–∞–∑–∞–Ω–æ"],
        }


def summarize_description_llm(description: str) -> dict:
    """
    –ü–æ–ª—É—á–∞–µ—Ç summary –æ–ø–∏—Å–∞–Ω–∏—è –≤–∞–∫–∞–Ω—Å–∏–∏ —Å –ø–æ–º–æ—â—å—é LLM.
    """
    if not description or description.strip() == "–ù–µ —É–∫–∞–∑–∞–Ω–æ":
        return {
            "about_company": "–ù–µ —É–∫–∞–∑–∞–Ω–æ",
            "responsibilities": ["–ù–µ —É–∫–∞–∑–∞–Ω–æ"],  
            "requirements": ["–ù–µ —É–∫–∞–∑–∞–Ω–æ"],  
        }

    prompt = SUMMARY_PROMPT_TEMPLATE.format(description=description)
    raw = gemini_api_call(prompt)
    logging.info("[Gemini‚Äësummary] –°—ã—Ä—ã–π –æ—Ç–≤–µ—Ç:\n" + raw)
    return clean_gemini_response(raw)

FILTER_PROMPT = """
–¢—ã –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å –≤–∞–∫–∞–Ω—Å–∏–∏ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏ –æ–ø–∏—Å–∞–Ω–∏—é.

–ü—Ä–æ—Ñ–µ—Å—Å–∏—è —Å—á–∏—Ç–∞–µ—Ç—Å—è —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ–π, –µ—Å–ª–∏ –æ–Ω–∞ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ –æ–¥–Ω–æ–π –∏–∑ —Å–ª–µ–¥—É—é—â–∏—Ö:

- Data Scientist
- Senior Data Scientist
- Junior Data Scientist
- Machine Learning Engineer
- ML Engineer
- Data Analyst
- Senior Data Analyst
- Data Engineer
- Big Data Engineer
- Data Architect
- Business Intelligence Analyst
- BI Analyst
- Business Intelligence Developer
- Statistician
- Quantitative Analyst
- NLP Engineer
- Computer Vision Engineer
- Deep Learning Engineer
- Artificial Intelligence Engineer
- AI Researcher
- Data Researcher
- Predictive Analytics Specialist
- Data Science Manager
- Analytics Consultant
- Data Miner
- Data Specialist
- Data Modeler
- DevOps Engineer
- MLOps Engineer
- System Analyst
- Analytics Engineer
- Data Platform Engineer
- Data Visualization Engineer
- Data Modeler
‚ùóÔ∏è–ò–≥–Ω–æ—Ä–∏—Ä—É–π –≤–∞–∫–∞–Ω—Å–∏–∏ –∏–∑ –¥—Ä—É–≥–∏—Ö —Å—Ñ–µ—Ä, –¥–∞–∂–µ –µ—Å–ª–∏ –≤ —Ç–µ–∫—Å—Ç–µ –≤—Å—Ç—Ä–µ—á–∞—é—Ç—Å—è —Å–ª–æ–≤–∞ —Ç–∏–ø–∞ ‚Äúdata‚Äù, ‚ÄúAI‚Äù, ‚Äúmodel‚Äù –∏ —Ç.–ø., –Ω–æ –æ–Ω–∏ –Ω–µ –æ—Ç–Ω–æ—Å—è—Ç—Å—è –∫ –ø—Ä–æ—Ñ–µ—Å—Å–∏—è–º –∏–∑ —Å–ø–∏—Å–∫–∞.

–ü—Ä–æ—Ñ–µ—Å—Å–∏—è: "{title}"
–û–ø–∏—Å–∞–Ω–∏–µ: "{description}"

–û—Ç–≤–µ—Ç—å —Å—Ç—Ä–æ–≥–æ –æ–¥–Ω–∏–º —Å–ª–æ–≤–æ–º: yes –∏–ª–∏ no.
"""


def filter_vacancy_llm(title: str, description: str) -> bool:
    """
    –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å –≤–∞–∫–∞–Ω—Å–∏–∏ —Å –ø–æ–º–æ—â—å—é LLM.
    """
    if not title or not description:
        return False

    prompt = FILTER_PROMPT.format(title=title, description=description)
    raw = gemini_api_call(prompt).strip()
    logging.info("[Gemini‚Äëfilter] –°—ã—Ä—ã–π –æ—Ç–≤–µ—Ç:\n" + raw)
    return raw.lower() == "yes"
