import logging
import re
from database import Database
import os
from datetime import datetime

def normalize_city_name(city: str) -> str:
    corrections = {
        '–ê–ª–º–∞—Ç—ã': '–ê–ª–º–∞—Ç—ã', "–ê—Å—Ç–∞–Ω–µ": "–ê—Å—Ç–∞–Ω–∞", "–ê—Ç—ã—Ä–∞—É": "–ê—Ç—ã—Ä–∞—É", "–®—ã–º–∫–µ–Ω—Ç–µ": "–®—ã–º–∫–µ–Ω—Ç",
        "–ö–æ—Å—Ç–∞–Ω–∞–µ": "–ö–æ—Å—Ç–∞–Ω–∞–π", "–ê–∫—Ç–æ–±–µ": "–ê–∫—Ç–æ–±–µ", "–ö–∞—Ä–∞–≥–∞–Ω–¥–µ": "–ö–∞—Ä–∞–≥–∞–Ω–¥–∞", "–¢–∞—Ä–∞–∑–µ": "–¢–∞—Ä–∞–∑",
        "–©—É—á–∏–Ω—Å–∫–µ": "–©—É—á–∏–Ω—Å–∫", "–£—Å—Ç—å-–ö–∞–º–µ–Ω–æ–≥–æ—Ä—Å–∫–µ": "–£—Å—Ç—å-–ö–∞–º–µ–Ω–æ–≥–æ—Ä—Å–∫", "–°–µ–º–µ–µ": "–°–µ–º–µ–π",
        "–ü–∞–≤–ª–æ–¥–∞—Ä–µ": "–ü–∞–≤–ª–æ–¥–∞—Ä", "–ö–æ–∫—à–µ—Ç–∞—É–µ": "–ö–æ–∫—à–µ—Ç–∞—É", "–¢–∞–ª–¥—ã–∫–æ—Ä–≥–∞–Ω–µ": "–¢–∞–ª–¥—ã–∫–æ—Ä–≥–∞–Ω",
        "–£—Ä–∞–ª—å—Å–∫–µ": "–£—Ä–∞–ª—å—Å–∫"
    }
    return corrections.get(city, city)

def extract_city(pub_text: str) -> str:
    if not pub_text or ' –≤ ' not in pub_text:
        return "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
    city = pub_text.split(' –≤ ')[-1].strip()
    city = re.sub(r'[.,\s]+$', '', city)
    return city.capitalize()

def clean_working_hours(hours_str: str) -> str:
    if not hours_str:
        return "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
    s = str(hours_str).strip()
    result = re.sub(r"(?i)^.*?—Ä–∞–±–æ—á–∏–µ —á–∞—Å—ã[:Ôºö]?\s*", "", s)
    return result if result else "–ù–µ —É–∫–∞–∑–∞–Ω–æ"

def extract_salary_range_with_currency(salary_str):
    if not salary_str or "–Ω–µ —É–∫–∞–∑–∞–Ω–æ" in str(salary_str).lower():
        return "–ù–µ —É–∫–∞–∑–∞–Ω–æ"

    text = str(salary_str).lower().replace("\xa0", " ").strip()
    if "‚Ç∏" in text:
        currency = "‚Ç∏"
    elif "‚ÇΩ" in text:
        currency = "‚ÇΩ"
    elif "$" in text or "usd" in text:
        currency = "$"
    elif "‚Ç¨" in text or "eur" in text:
        currency = "‚Ç¨"
    else:
        currency = ""

    m = re.search(r"–æ—Ç\s+([\d\s]+)\s*(?:‚Ç∏|‚ÇΩ|\$|‚Ç¨)?\s*–¥–æ\s+([\d\s]+)\s*(?:‚Ç∏|‚ÇΩ|\$|‚Ç¨)?", text)
    if m:
        lo = m.group(1).replace(" ", "")
        hi = m.group(2).replace(" ", "")
        return f"{lo}-{hi} {currency}"

    m = re.search(r"–¥–æ\s+([\d\s]+)\s*(?:‚Ç∏|‚ÇΩ|\$|‚Ç¨)?", text)
    if m:
        hi = m.group(1).replace(" ", "")
        return f"–¥–æ {hi} {currency}"

    m = re.search(r"–æ—Ç\s+([\d\s]+)\s*(?:‚Ç∏|‚ÇΩ|\$|‚Ç¨)?", text)
    if m:
        lo = m.group(1).replace(" ", "")
        return f"–æ—Ç {lo} {currency}"

    m = re.search(r"([\d\s]+)\s*(‚Ç∏|‚ÇΩ|\$|‚Ç¨)", text)
    if m:
        amount = m.group(1).replace(" ", "")
        cur = m.group(2)
        return f"{amount} {cur}"

    m = re.search(r"([\d\s]+)", text)
    if m:
        amount = m.group(1).replace(" ", "")
        return f"{amount} {currency}"

    return "–ù–µ —É–∫–∞–∑–∞–Ω–æ"

def clean_skills(skills_str):
    if not skills_str or skills_str == "–ù–µ —É–∫–∞–∑–∞–Ω–æ":
        return "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
    try:
        skills = skills_str.split(",")
        skills = [s.strip() for s in skills if s.strip()]
        return ", ".join(skills) if skills else "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
    except:
        return "–ù–µ —É–∫–∞–∑–∞–Ω–æ"

month_map = {
    "—è–Ω–≤–∞—Ä—è": "01", "—Ñ–µ–≤—Ä–∞–ª—è": "02", "–º–∞—Ä—Ç–∞": "03", "–∞–ø—Ä–µ–ª—è": "04",
    "–º–∞—è": "05", "–∏—é–Ω—è": "06", "–∏—é–ª—è": "07", "–∞–≤–≥—É—Å—Ç–∞": "08",
    "—Å–µ–Ω—Ç—è–±—Ä—è": "09", "–æ–∫—Ç—è–±—Ä—è": "10", "–Ω–æ—è–±—Ä—è": "11", "–¥–µ–∫–∞–±—Ä—è": "12",
}

def parse_russian_date(date_str: str) -> str:
    try:
        parts = date_str.strip().split()
        if len(parts) != 3:
            return "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
        day, month_rus, year = parts
        month = month_map.get(month_rus.lower())
        return f"{year}-{month}-{day.zfill(2)}" if month else "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
    except:
        return "–ù–µ —É–∫–∞–∑–∞–Ω–æ"

def clean_work_format(text: str) -> str:
    if not isinstance(text, str):
        return "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
    return text.replace("–§–æ—Ä–º–∞—Ç —Ä–∞–±–æ—Ç—ã:", "").strip().capitalize() or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"

def run_cleaning_pipeline(db):
    
    conn = db.get_connection()
    cursor = conn.cursor()
    try:
        cursor.execute("SELECT COUNT(*) FROM vacancies WHERE COALESCE(sent_to_telegram, FALSE) = FALSE")
        count = cursor.fetchone()[0]
        logging.info(f"üïµÔ∏è‚Äç‚ôÇÔ∏è –ù–∞–π–¥–µ–Ω–æ {count} –Ω–µ–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")

        if count > 0:
            logging.info("‚è≥ –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –≤–∞–∫–∞–Ω—Å–∏–π, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –≤ Telegram...")
            cursor.execute("DELETE FROM vacancies WHERE COALESCE(sent_to_telegram, FALSE) = FALSE")
            deleted_count = cursor.rowcount
            conn.commit()
            logging.info(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ {deleted_count} –Ω–µ–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π")
        else:
            logging.info("‚úÖ –ù–µ—Ç –≤–∞–∫–∞–Ω—Å–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")

    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –Ω–µ–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π: {e}")
        conn.rollback()

    cursor.execute("""
        SELECT id, location, salary, skills, work_format, working_hours, published_date
        FROM vacancies
        WHERE summary_duties IS NULL OR summary_requirements IS NULL OR summary_company IS NULL
    """)
    rows = cursor.fetchall()
    for row in rows:
        vacancy_id, location, salary, skills, work_format, working_hours, published_date = row
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç—ã
        if published_date and published_date.strip() != "–ù–µ —É–∫–∞–∑–∞–Ω–æ":
            parsed_date_str = parse_russian_date(published_date)
            if parsed_date_str != "–ù–µ —É–∫–∞–∑–∞–Ω–æ":
                try:
                    published_at = datetime.strptime(parsed_date_str, "%Y-%m-%d").date()
                except Exception:
                    published_at = None
            else:
                published_at = None
        else:
            published_at = None
        cleaned = {
            "location": normalize_city_name(extract_city(location)) if location else "–ù–µ —É–∫–∞–∑–∞–Ω–æ",
            "salary_range": extract_salary_range_with_currency(salary) if salary else "–ù–µ —É–∫–∞–∑–∞–Ω–æ",
            "skills": clean_skills(skills) if skills else "–ù–µ —É–∫–∞–∑–∞–Ω–æ",
            "work_format": clean_work_format(work_format) if work_format else "–ù–µ —É–∫–∞–∑–∞–Ω–æ",
            "working_hours": clean_working_hours(working_hours) if working_hours else "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
        }
        cursor.execute("""
            UPDATE vacancies
            SET location = %s, salary_range = %s, skills = %s,
                work_format = %s, working_hours = %s, published_at = %s
            WHERE id = %s
        """, (
            cleaned['location'], cleaned['salary_range'], cleaned['skills'],
            cleaned['work_format'], cleaned['working_hours'],
            published_at,
            vacancy_id
        ))

    conn.commit()
    db.return_connection(conn)
    logging.info(f"‚úÖ –û—á–∏—â–µ–Ω–æ {len(rows)} –∑–∞–ø–∏—Å–µ–π")

if __name__ == "__main__":
    db = Database(os.getenv("DATABASE_URL"))
    run_cleaning_pipeline(db)