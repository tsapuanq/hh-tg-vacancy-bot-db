# publisher.py
import asyncio
import random
import logging
from telegram import Bot
from telegram.error import TelegramError # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ
# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ config
from src.config import TELEGRAM_BOT_TOKEN, CHANNEL_USERNAME, TELEGRAM_DELAY_SECONDS, TELEGRAM_MAX_DELAY_SECONDS
# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º LLM —Ñ—É–Ω–∫—Ü–∏–∏
from src.llm_summary import summarize_description_llm, filter_vacancy_llm
from src.cleaning import clean_text_safe # –ò—Å–ø–æ–ª—å–∑—É–µ–º clean_text_safe –∏–∑ cleaning
# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∞—Å—Å Database
from database import Database
import re
from datetime import date # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º date –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∏–ø–∞
import psycopg2.extras

def escape_markdown_v2(text: str) -> str:
    """–≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã MarkdownV2 –≤ —Å—Ç—Ä–æ–∫–µ."""
    if not isinstance(text, str):
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å—Ç—Ä–æ–∫—É, –µ—Å–ª–∏ –≤—Ö–æ–¥ –Ω–µ —Å—Ç—Ä–æ–∫–∞ (–Ω–∞–ø—Ä. None –∏–ª–∏ —á–∏—Å–ª–æ)
        text = str(text if text is not None else '') # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º None –≤ –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –ø–µ—Ä–µ–¥ str()

    # –°–ø–∏—Å–æ–∫ —Å–∏–º–≤–æ–ª–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞—Ç—å
    chars_to_escape = r'_*[]()~`>#+-=|{}.!'
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤—Å–µ—Ö —ç—Ç–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
    pattern = r'(' + '|'.join(re.escape(char) for char in chars_to_escape) + r')'
    
    # –ó–∞–º–µ–Ω—è–µ–º –∫–∞–∂–¥—ã–π –Ω–∞–π–¥–µ–Ω–Ω—ã–π —Å–∏–º–≤–æ–ª –Ω–∞ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π (\ + —Å–∏–º–≤–æ–ª)
    escaped_text = re.sub(pattern, r'\\\1', text)
    
    return escaped_text


# ‚Äî‚Äî‚Äî –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è –∫–æ–Ω–≤–µ—Ä—Å–∏—è LLM-—Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ Markdown-–±—É–ª–ª–µ—Ç—ã ‚Äî‚Äî‚Äî
def _to_bullets(x) -> str:
    """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å–ø–∏—Å–æ–∫ –∏–ª–∏ —Å—Ç—Ä–æ–∫—É —Å –ø–µ—Ä–µ–Ω–æ—Å–∞–º–∏ —Å—Ç—Ä–æ–∫ –≤ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ Markdown."""
    if not x or (isinstance(x, str) and x.strip().lower() == "–Ω–µ —É–∫–∞–∑–∞–Ω–æ"):
        return "–ù–µ —É–∫–∞–∑–∞–Ω–æ"

    if isinstance(x, list):
        lines = x
    else:
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ —Å—Ç—Ä–æ–∫—É, —Ä–∞–∑–¥–µ–ª—è—è –ø–æ –ø–µ—Ä–µ–Ω–æ—Å–∞–º —Å—Ç—Ä–æ–∫
        lines = str(x).split("\n")

    bullets = []
    for item in lines:
        s = str(item).strip().strip("'\"") # –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –∏ –∫–∞–≤—ã—á–∫–∏
        if s and s.lower() != "–Ω–µ —É–∫–∞–∑–∞–Ω–æ":
            # –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏–º–≤–æ–ª–æ–≤ MarkdownV2 –≤ —ç–ª–µ–º–µ–Ω—Ç–∞—Ö —Å–ø–∏—Å–∫–∞
            # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –ø—É–Ω–∫—Ç –æ—Ç–¥–µ–ª—å–Ω–æ, —á—Ç–æ–±—ã –Ω–µ –ª–æ–º–∞—Ç—å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–Ω—É—Ç—Ä–∏ –ø—É–Ω–∫—Ç–∞,
            # –Ω–æ –ø—Ä–∏ —ç—Ç–æ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å —Ç–µ–∫—Å—Ç.
            escaped_item = escape_markdown_v2(s)
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∂–∏—Ä–Ω—É—é —Ç–æ—á–∫—É –∏–ª–∏ –¥—Ä—É–≥—É—é –º–∞—Ä–∫–∏—Ä–æ–≤–∫—É
            # –¢–æ—á–∫–∞ –º–∞—Ä–∫–∏—Ä–æ–≤–∫–∏ ‚Ä¢ –Ω–µ –¥–æ–ª–∂–Ω–∞ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è —Å–∞–º–∞ –ø–æ —Å–µ–±–µ.
            bullets.append(f"‚Ä¢ {escaped_item}")

    return "\n".join(bullets) if bullets else "–ù–µ —É–∫–∞–∑–∞–Ω–æ"


# ‚Äî‚Äî‚Äî –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏ –¥–ª—è Telegram ‚Äî‚Äî‚Äî
def format_message(data: dict, summary: dict) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –≤–∞–∫–∞–Ω—Å–∏–∏ –∏ summary –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram –≤ MarkdownV2.
    –ü—Ä–∏–º–µ–Ω—è–µ—Ç —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –ø–æ–ª–µ–π.
    """
    # –ü—Ä–∏–º–µ–Ω—è–µ–º clean_text_safe (–µ—Å–ª–∏ –Ω–µ –ø—Ä–∏–º–µ–Ω–∏–ª–∏ —Ä–∞–Ω—å—à–µ) –∏ escape_markdown_v2
    # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –≤—Å–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –ø–æ–ª—è –î–û –ø–æ–º–µ—â–µ–Ω–∏—è –∏—Ö –≤ f-string
    title = escape_markdown_v2(clean_text_safe(data.get('title','–ù–µ —É–∫–∞–∑–∞–Ω–æ')))
    company = escape_markdown_v2(clean_text_safe(data.get('company', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')))
    location = escape_markdown_v2(clean_text_safe(data.get('location', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')))
    
    # –î–ª—è –∑–∞—Ä–ø–ª–∞—Ç—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º salary_range, –µ—Å–ª–∏ –µ—Å—Ç—å, –∏–Ω–∞—á–µ salary
    salary_raw = data.get('salary_range') or data.get('salary')
    salary_info = escape_markdown_v2(clean_text_safe(salary_raw if salary_raw is not None else '–ù–µ —É–∫–∞–∑–∞–Ω–æ'))

    experience = escape_markdown_v2(clean_text_safe(data.get('experience', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')))
    employment_type = escape_markdown_v2(clean_text_safe(data.get('employment_type', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')))
    schedule = escape_markdown_v2(clean_text_safe(data.get('schedule', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')))
    working_hours = escape_markdown_v2(clean_text_safe(data.get('working_hours', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')))
    work_format = escape_markdown_v2(clean_text_safe(data.get('work_format', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')))

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å –∏ —ç—Ç–æ –æ–±—ä–µ–∫—Ç date
    pub_date_obj = data.get('published_at')
    pub_date_str_formatted = "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
    if isinstance(pub_date_obj, date):
         try:
             pub_date_str_formatted = pub_date_obj.strftime("%d.%m.%Y") # –§–æ—Ä–º–∞—Ç "–¥–µ–Ω—å.–º–µ—Å—è—Ü.–≥–æ–¥"
         except Exception:
              # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã, –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –µ–µ –≤ —Å—Ç—Ä–æ–∫—É
              pub_date_str_formatted = str(pub_date_obj)
    # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É –¥–∞—Ç—ã
    pub_date_str_formatted = escape_markdown_v2(pub_date_str_formatted)

    # Summary –ø–æ–ª—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –≤ _to_bullets, –∫–æ—Ç–æ—Ä–∞—è —Å–∞–º–∞ –≤—ã–∑—ã–≤–∞–µ—Ç escape_markdown_v2 –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—É–Ω–∫—Ç–∞
    resp = _to_bullets(summary.get("responsibilities", "–ù–µ —É–∫–∞–∑–∞–Ω–æ"))
    reqs = _to_bullets(summary.get("requirements", "–ù–µ —É–∫–∞–∑–∞–Ω–æ"))
    
    # Summary '–û –∫–æ–º–ø–∞–Ω–∏–∏' - —ç—Ç–æ –æ–¥–Ω–∞ —Å—Ç—Ä–æ–∫–∞/–ø–∞—Ä–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π, —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º –µ–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é
    about = escape_markdown_v2(clean_text_safe(summary.get("about_company", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")))

    # URL –¥–ª—è —Å—Å—ã–ª–∫–∏ - —Å–∞–º URL –Ω–µ —ç–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç—Å—è, —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç —Å—Å—ã–ª–∫–∏
    url = data.get('url', '#') # URL –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—Å–µ–≥–¥–∞, –Ω–æ –¥–æ–±–∞–≤–∏–º –¥–µ—Ñ–æ–ª—Ç
    link_text = escape_markdown_v2("–ü–æ–¥—Ä–æ–±–Ω–µ–µ –Ω–∞ hh") # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å—Å—ã–ª–∫–∏

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º MarkdownV2 —Å–∏–Ω—Ç–∞–∫—Å–∏—Å. –í—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —É–∂–µ —Å–æ–¥–µ—Ä–∂–∞—Ç —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏.
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∂–∏—Ä–Ω—ã–π —à—Ä–∏—Ñ—Ç –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞
    message_text = f"""\
üåê –ì–æ—Ä–æ–¥: {location}
üìÖ –î–æ–ª–∂–Ω–æ—Å—Ç—å: **{title}**
üíº –ö–æ–º–ø–∞–Ω–∏—è: {company}
üí∞ –ó–ü: {salary_info}

üéì –û–ø—ã—Ç: {experience}
üìÇ –¢–∏–ø –∑–∞–Ω—è—Ç–æ—Å—Ç–∏: {employment_type}
üìÜ –ì—Ä–∞—Ñ–∏–∫: {schedule}
üïí –†–∞–±–æ—á–∏–µ —á–∞—Å—ã: {working_hours}
üè† –§–æ—Ä–º–∞—Ç —Ä–∞–±–æ—Ç—ã: {work_format}
üìÖ –î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {pub_date_str_formatted}

üßæ –û–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏:
{resp}

üéØ –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
{reqs}

üè¢ –û –∫–æ–º–ø–∞–Ω–∏–∏:
{about}

üîé [{link_text}]({url})
"""

    return message_text

async def main(db: Database):
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–∞–π–ø–ª–∞–π–Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è, —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è, –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram.
    """
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è - –ª—É—á—à–µ –¥–µ–ª–∞—Ç—å –æ–¥–∏–Ω —Ä–∞–∑ –≤ run_all.py
    # if not logging.getLogger().handlers:
    #      logging.basicConfig(level=logging.INFO)


    conn = None # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º None
    cursor = None

    try:
        conn = db.get_connection()
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º DictCursor, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å —Å—Ç—Ä–æ–∫–∏ –∫–∞–∫ —Å–ª–æ–≤–∞—Ä–∏, –∞ –Ω–µ –∫–æ—Ä—Ç–µ–∂–∏.
        # –≠—Ç–æ –¥–µ–ª–∞–µ—Ç –¥–æ—Å—Ç—É–ø –∫ –¥–∞–Ω–Ω—ã–º –ø–æ –∏–º–µ–Ω–∞–º –∫–æ–ª–æ–Ω–æ–∫ –±–æ–ª–µ–µ —É–¥–æ–±–Ω—ã–º –∏ –Ω–∞–¥–µ–∂–Ω—ã–º.
        cursor = conn.cursor(cursor_factory=psycopg2.extras.DictCursor) # –ù—É–∂–µ–Ω import psycopg2.extras


        # –®–∞–≥ 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏ —Å –ø–æ–º–æ—â—å—é LLM
        logging.info("üïµÔ∏è‚Äç‚ôÇÔ∏è –®–∞–≥ 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏ –Ω–æ–≤—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π...")
        cursor.execute(
            """
            SELECT id, title, description
            FROM vacancies
            -- –í—ã–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ –≤–∞–∫–∞–Ω—Å–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã —Å–µ–≥–æ–¥–Ω—è –∏ –µ—â–µ –Ω–µ –±—ã–ª–∏ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω—ã
            -- is_relevant = NULL –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–π –≤—Å—Ç–∞–≤–∫–∏ –≤ run_scraper.py
            WHERE is_relevant IS NULL AND processed_at >= CURRENT_DATE
            """
        )
        rows_to_filter = cursor.fetchall()
        logging.info(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(rows_to_filter)} –≤–∞–∫–∞–Ω—Å–∏–π –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏.")

        for idx, row in enumerate(rows_to_filter, 1):
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ DictCursor row –ø–æ –∏–º–µ–Ω–∞–º –∫–æ–ª–æ–Ω–æ–∫
            vacancy_id = row['id']
            title = row['title']
            description = row['description']

            logging.info(f"[Gemini Filter] [{idx}/{len(rows_to_filter)}] –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å –¥–ª—è: {title}")
            try:
                is_relevant = filter_vacancy_llm(title, description)
                logging.info(f"[Gemini Filter] {title} ‚Üí {'‚úÖ –†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ' if is_relevant else '‚ùå –ù–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ'}")

                if is_relevant:
                    # –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—É—é
                    cursor.execute(
                        "UPDATE vacancies SET is_relevant = TRUE WHERE id = %s", (vacancy_id,)
                    )
                else:
                    # –£–¥–∞–ª—è–µ–º –Ω–µ—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—É—é –≤–∞–∫–∞–Ω—Å–∏—é
                    # –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ä–∞–∑—É –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∏—Å–∫–æ–≤–∞–Ω–Ω—ã–º, –º–æ–∂–Ω–æ –≤–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å is_relevant = FALSE
                    # cursor.execute("DELETE FROM vacancies WHERE id = %s", (vacancy_id,))
                    cursor.execute(
                         "UPDATE vacancies SET is_relevant = FALSE WHERE id = %s", (vacancy_id,)
                    )


                # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –≤—ã–∑–æ–≤–∞–º–∏ LLM –¥–ª—è —Å–æ–±–ª—é–¥–µ–Ω–∏—è rate limit
                await asyncio.sleep(4.5)

            except Exception as e:
                 # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏, –Ω–æ –Ω–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
                 logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –≤–∞–∫–∞–Ω—Å–∏–∏ {vacancy_id} ('{title}'): {e}", exc_info=True) # –õ–æ–≥–∏—Ä—É–µ–º traceback
                 # –í–æ–∑–º–æ–∂–Ω–æ, —Å—Ç–æ–∏—Ç –ø–æ–º–µ—Ç–∏—Ç—å —ç—Ç—É –≤–∞–∫–∞–Ω—Å–∏—é, —á—Ç–æ–±—ã –Ω–µ –ø—ã—Ç–∞—Ç—å—Å—è —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –µ–µ —Å–Ω–æ–≤–∞?
                 # –ù–∞–ø—Ä–∏–º–µ—Ä, –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª–µ llm_filter_failed BOOLEAN –∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –µ–≥–æ –≤ TRUE


        conn.commit() # –ö–æ–º–º–∏—Ç–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏

        # –®–∞–≥ 2: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—É–º–º–∞—Ä–∏ –¥–ª—è —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π —Å –ø–æ–º–æ—â—å—é LLM
        logging.info("üìù –®–∞–≥ 2: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—É–º–º–∞—Ä–∏ –¥–ª—è —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π...")
        cursor.execute(
            """
            SELECT id, description
            FROM vacancies
            -- –í—ã–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏, —É –∫–æ—Ç–æ—Ä—ã—Ö –µ—â–µ –Ω–µ—Ç –ø–æ–ª–Ω–æ–≥–æ —Å—É–º–º–∞—Ä–∏
            WHERE is_relevant = TRUE
              AND (summary_duties IS NULL OR summary_requirements IS NULL OR summary_company IS NULL)
            """
        )
        rows_to_summarize = cursor.fetchall()
        logging.info(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(rows_to_summarize)} –≤–∞–∫–∞–Ω—Å–∏–π –¥–ª—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏.")

        for idx, row in enumerate(rows_to_summarize, 1):
            vacancy_id = row['id']
            description = row['description']

            logging.info(f"[Gemini Summary] [{idx}/{len(rows_to_summarize)}] –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—É–º–º–∞—Ä–∏ –¥–ª—è –≤–∞–∫–∞–Ω—Å–∏–∏ {vacancy_id}...")
            try:
                summary = summarize_description_llm(description)
                cursor.execute(
                    """
                    UPDATE vacancies
                    SET summary_duties = %s, summary_requirements = %s, summary_company = %s
                    WHERE id = %s
                    """,
                    (
                        summary.get("responsibilities"), # –ï—Å–ª–∏ get –≤–µ—Ä–Ω—É–ª None, —Ç–∞–∫ –∏ –∑–∞–ø–∏—à–µ—Ç—Å—è –≤ –ë–î
                        summary.get("requirements"),
                        summary.get("about_company"),
                        vacancy_id,
                    ),
                )
                # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –≤—ã–∑–æ–≤–∞–º–∏ LLM
                await asyncio.sleep(4.5)

            except Exception as e:
                # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏
                 logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏ –≤–∞–∫–∞–Ω—Å–∏–∏ {vacancy_id}: {e}", exc_info=True)
                 # –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ, –º–æ–∂–Ω–æ –ø–æ–º–µ—Ç–∏—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é, —á—Ç–æ–±—ã –Ω–µ –ø—ã—Ç–∞—Ç—å—Å—è —Å—É–º–º–∞—Ä–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞


        conn.commit() # –ö–æ–º–º–∏—Ç–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏


        # –®–∞–≥ 3: –ü—É–±–ª–∏–∫–∞—Ü–∏—è —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –∏ –Ω–µ–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π –≤ Telegram
        logging.info("üì¨ –®–∞–≥ 3: –ü—É–±–ª–∏–∫–∞—Ü–∏—è –≤ Telegram...")
        cursor.execute(
            """
            SELECT id, title, company, location, salary, salary_range, experience, employment_type, schedule,
                   working_hours, work_format, published_at, summary_duties, summary_requirements,
                   summary_company, url
            FROM vacancies
            -- –í—ã–±–∏—Ä–∞–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏, –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Å–µ–≥–æ–¥–Ω—è (–∏–ª–∏ –ø–æ–∑–∂–µ?) –∏ –µ—â–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ,
            -- –∏ —É–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ —É –Ω–∏—Ö –µ—Å—Ç—å —Å—É–º–º–∞—Ä–∏ (–∏–ª–∏ –ø—Ä–æ—à–µ–ª —à–∞–≥ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏)
            WHERE is_relevant = TRUE
              AND processed_at >= CURRENT_DATE -- –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–µ–≥–æ–¥–Ω—è –∏–ª–∏ –ø–æ–∑–∂–µ
              AND sent_to_telegram = FALSE -- –ï—â–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
              AND summary_duties IS NOT NULL -- –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ
              -- –£—Å–ª–æ–≤–∏–µ AND summary_requirements IS NOT NULL –ò summary_company IS NOT NULL
              -- –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–ª–∏—à–∫–æ–º —Å—Ç—Ä–æ–≥–∏–º, –µ—Å–ª–∏ LLM –≤–µ—Ä–Ω—É–ª "–ù–µ —É–∫–∞–∑–∞–Ω–æ" –¥–ª—è –æ–¥–Ω–æ–≥–æ –∏–∑ –ø–æ–ª–µ–π.
              -- –ú–æ–∂–Ω–æ —É–±—Ä–∞—Ç—å —ç—Ç–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏, –µ—Å–ª–∏ NULL –¥–æ–ø—É—Å—Ç–∏–º, –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—è—Ç—å –Ω–∞ '–ù–µ —É–∫–∞–∑–∞–Ω–æ' –≤ Python
              -- –Ω–æ –¥–ª—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ —Å WHERE –≤—ã—à–µ, –æ—Å—Ç–∞–≤–∏–º –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ NULL

            """
        )
        rows_to_publish = cursor.fetchall()

        if not rows_to_publish:
            logging.info("‚ÑπÔ∏è –°–µ–≥–æ–¥–Ω—è –Ω–µ—Ç –Ω–æ–≤—ã—Ö —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏.")
            # –ù–µ—Ç –≤–∞–∫–∞–Ω—Å–∏–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏, –ø—Ä–æ—Å—Ç–æ –≤—ã—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ –≤–æ–∑–≤—Ä–∞—Ç–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
            # return # –£–±–∏—Ä–∞–µ–º return, —á—Ç–æ–±—ã –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å finally –±–ª–æ–∫

        logging.info(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(rows_to_publish)} —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –∏ –Ω–µ–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏.")

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞
        if not TELEGRAM_BOT_TOKEN or not CHANNEL_USERNAME:
             logging.error("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–ª–∏ –∏–º—è –∫–∞–Ω–∞–ª–∞ Telegram –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É.")
             # return # –£–±–∏—Ä–∞–µ–º return


        bot = Bot(token=TELEGRAM_BOT_TOKEN) # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Ç–æ–∫–µ–Ω—ã

        for idx, row in enumerate(rows_to_publish, 1):
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ DictCursor row –ø–æ –∏–º–µ–Ω–∞–º –∫–æ–ª–æ–Ω–æ–∫
            # –≠—Ç–æ —É–¥–æ–±–Ω–µ–µ –∏ –Ω–∞–¥–µ–∂–Ω–µ–µ, —á–µ–º –ø–æ –∏–Ω–¥–µ–∫—Å—É
            data = dict(row) # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º DictRow –≤ –æ–±—ã—á–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ, —Ö–æ—Ç—è –º–æ–∂–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å –∏ —Å DictRow

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ª–æ–≤–∞—Ä—å summary –∏–∑ –ø–æ–ª–µ–π –¥–∞–Ω–Ω—ã—Ö
            summary = {
                "responsibilities": data.get("summary_duties"), # –ò—Å–ø–æ–ª—å–∑—É–µ–º .get()
                "requirements": data.get("summary_requirements"),
                "about_company": data.get("summary_company"),
            }
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Telegram
            text = format_message(data, summary)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –ª–∏ –±–æ—Ç, –ø—Ä–µ–∂–¥–µ —á–µ–º –ø—ã—Ç–∞—Ç—å—Å—è –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å
            if not bot:
                logging.warning(f"[{idx}/{len(rows_to_publish)}] –ü—Ä–æ–ø—É—Å–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∞–∫–∞–Ω—Å–∏–∏ {data.get('id', 'N/A')} –∏–∑-–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞/–∫–∞–Ω–∞–ª–∞.")
                continue # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π –≤–∞–∫–∞–Ω—Å–∏–∏

            try:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                await bot.send_message(
                    chat_id=CHANNEL_USERNAME,
                    text=text,
                    parse_mode="MarkdownV2" # –ò—Å–ø–æ–ª—å–∑—É–µ–º MarkdownV2 –¥–ª—è –ª—É—á—à–µ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º
                    # link_preview_options=LinkPreviewOptions(is_disabled=True) # –û—Ç–∫–ª—é—á–∏—Ç—å –ø—Ä–µ–≤—å—é, –µ—Å–ª–∏ –º–µ—à–∞–µ—Ç
                )
                logging.info(f"‚úÖ [{idx}/{len(rows_to_publish)}] –í–∞–∫–∞–Ω—Å–∏—è {data.get('id', 'N/A')} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ Telegram.")

                # –ü–æ–º–µ—á–∞–µ–º –≤–∞–∫–∞–Ω—Å–∏—é –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é
                cursor.execute(
                    "UPDATE vacancies SET sent_to_telegram = TRUE WHERE id = %s",
                    (data["id"],), # –ò—Å–ø–æ–ª—å–∑—É–µ–º id –∏–∑ —Å–ª–æ–≤–∞—Ä—è data
                )
                conn.commit() # –ö–æ–º–º–∏—Ç–∏–º –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–π —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏

            except TelegramError as e:
                # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ—Ä–µ–∑ Telegram API
                logging.error(f"‚ùå –û—à–∏–±–∫–∞ Telegram API –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–∞–∫–∞–Ω—Å–∏–∏ {data.get('id', 'N/A')} ('{data.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}'): {e}")
                # –í–∞–∫–∞–Ω—Å–∏—è –Ω–µ –ø–æ–º–µ—á–∞–µ—Ç—Å—è –∫–∞–∫ sent_to_telegram=TRUE, –±—É–¥–µ—Ç –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –≤ —Å–ª–µ–¥. —Ä–∞–∑
                # conn.rollback() # –ù–µ –Ω—É–∂–µ–Ω, —Ç.–∫. –∫–æ–º–º–∏—Ç –∏–¥–µ—Ç –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
                continue # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π –≤–∞–∫–∞–Ω—Å–∏–∏

            except Exception as e:
                # –õ–æ–≥–∏—Ä—É–µ–º –ª—é–±—ã–µ –¥—Ä—É–≥–∏–µ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ
                logging.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–∞–∫–∞–Ω—Å–∏–∏ {data.get('id', 'N/A')} ('{data.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}'): {e}", exc_info=True)
                # conn.rollback()
                continue # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É

            # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏ –≤ Telegram
            if idx < len(rows_to_publish):
                delay = random.uniform(TELEGRAM_DELAY_SECONDS, TELEGRAM_MAX_DELAY_SECONDS)
                logging.info(f"‚è±Ô∏è –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –æ—Ç–ø—Ä–∞–≤–∫–æ–π: {delay:.2f} —Å–µ–∫.")
                await asyncio.sleep(delay)

        # –£–¥–∞–ª–µ–Ω–∏–µ –Ω–µ–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π - –£–î–ê–õ–ï–ù–û –∫–∞–∫ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –æ–ø–∞—Å–Ω–æ–µ.
        # –õ–æ–≥–∏–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –∏–ª–∏ –Ω–µ—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ –¥—Ä—É–≥–æ–º –º–µ—Å—Ç–µ
        # –∏ –±—ã—Ç—å –±–æ–ª–µ–µ –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ–π.

    except Exception as e:
        logging.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {e}", exc_info=True)


    finally:
        # –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –≤ –ø—É–ª
        if cursor:
             cursor.close()
        if conn:
            db.return_connection(conn)


    logging.info(f"üì¨ –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —ç—Ç–æ–º –∑–∞–ø—É—Å–∫–µ: {len(rows_to_publish)} –≤–∞–∫–∞–Ω—Å–∏–π.")


# run_publisher –æ—Å—Ç–∞–µ—Ç—Å—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –æ–±–µ—Ä—Ç–∫–æ–π –¥–ª—è main
def run_publisher(db):
    # –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å psycopg2.extras –¥–ª—è DictCursor
    import psycopg2.extras
    return asyncio.run(main(db))